<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <title></title>
    <!--[if lt IE 8]>
        <script>
            if (typeof document.querySelector === 'undefined') {
                document.querySelector = function (target) {
                    return document.getElementsByTagName(target)[0] || null;
                }
            }
        </script>
    <![endif]-->

        <!--[if lt IE 9]>
            <script src="../public/IE9.js"></script>
        <![endif]-->
        <script>
            Date.prototype.format = function(pattern) {
		
                if(!pattern)
                    pattern = "yyyy-MM-dd HH:mm:ss";
                
                var Week = ['日', '一', '二', '三', '四', '五', '六'];
                
                var str = pattern.replace(/yyyy|YYYY/, this.getFullYear());
                str = str.replace(/yy|YY/, (this.getYear() % 100) > 9 ? (this.getYear() % 100).toString() : '0' + (this.getYear() % 100));
                var month = this.getMonth() + 1;
                str = str.replace(/MM/, month > 9 ? month.toString() : '0' + month);
                str = str.replace(/M/g, month);

                str = str.replace(/w|W/g, Week[this.getDay()]);

                str = str.replace(/dd|DD/, this.getDate() > 9 ? this.getDate().toString() : '0' + this.getDate());
                str = str.replace(/d|D/g, this.getDate());

                str = str.replace(/hh|HH/, this.getHours() > 9 ? this.getHours().toString() : '0' + this.getHours());
                str = str.replace(/h|H/g, this.getHours());
                str = str.replace(/mm/, this.getMinutes() > 9 ? this.getMinutes().toString() : '0' + this.getMinutes());
                str = str.replace(/m/g, this.getMinutes());

                str = str.replace(/ss|SS/, this.getSeconds() > 9 ? this.getSeconds().toString() : '0' + this.getSeconds());
                str = str.replace(/s|S/g, this.getSeconds());
                return str;
            };
        Function.prototype.bind || functionPrototypeBind();
        function functionPrototypeBind() {
            var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
            var slice = Array.prototype.slice;
            var toStr = Object.prototype.toString;
            var funcType = '[object Function]';
            Function.prototype.bind = function (that) {
                var target = this;
                if (typeof target !== 'function' || toStr.call(target) !== funcType) {
                    throw new TypeError(ERROR_MESSAGE + target);
                }
                var args = slice.call(arguments, 1);
    
                var bound;
                var binder = function () {
                    if (this instanceof bound) {
                        var result = target.apply(
                            this,
                            args.concat(slice.call(arguments))
                        );
                        if (Object(result) === result) {
                            return result;
                        }
                        return this;
                    } else {
                        return target.apply(
                            that,
                            args.concat(slice.call(arguments))
                        );
                    }
                };
    
                var boundLength = Math.max(0, target.length - args.length);
                var boundArgs = [];
                for (var i = 0; i < boundLength; i++) {
                    boundArgs.push('$' + i);
                }
    
                bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);
    
                if (target.prototype) {
                    var Empty = function Empty() {};
                    Empty.prototype = target.prototype;
                    bound.prototype = new Empty();
                    Empty.prototype = null;
                }
    
                return bound;
            };
        }
    </script>
</head>

<body>
    <div id="root"></div>
</body>

</html>